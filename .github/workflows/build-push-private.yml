on:
  workflow_call:
    inputs:
      image-name:
        required: true
        type: string
      additional-image-tags:
        required: false
        type: string
      registry:
        required: false
        type: string
        default: transitionmonitordockerregistry.azurecr.io

    outputs:
      full-image-name:
        description: "Full pushed image name including host/registry, name, and tag"
        value: ${{ jobs.docker-build.outputs.full-image-name }}
jobs:
  docker-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    timeout-minutes: 15
    outputs:
      full-image-name: ${{ steps.push-image.outputs.full-image-name }}

    steps:

      - name: Checkout workflow.transition.monitor
        uses: actions/checkout@v4
        with:
          path: workflow.transition.monitor

      - name: Prepare environment
        run: |
          NOW="$(date -u +'%Y%m%dT%H%M%SZ')"
          echo "NOW=$NOW" >> $GITHUB_ENV
          echo "$NOW"

          registry_image=$(
            echo "${{ inputs.registry }}/${{ inputs.image-name }}" | \
            tr '[:upper:]' '[:lower:]' \
          )
          REGISTRY_IMAGE=${registry_image}
          echo "REGISTRY_IMAGE=$REGISTRY_IMAGE"
          echo "REGISTRY_IMAGE=$REGISTRY_IMAGE" >> $GITHUB_ENV

          config_file="workflow.transition.monitor/build/config/${{ inputs.image-name }}.json"

          PACTA_DATA_SHARE_PATH="$(jq -rc '.data_share_path' $config_file)"
          echo "PACTA_DATA_SHARE_PATH=$PACTA_DATA_SHARE_PATH"
          echo "PACTA_DATA_SHARE_PATH=$PACTA_DATA_SHARE_PATH" >> "$GITHUB_ENV"

          INDEX_SHARE_PATH="$(jq -rc '.index_share_path' $config_file)"
          echo "INDEX_SHARE_PATH=$INDEX_SHARE_PATH"
          echo "INDEX_SHARE_PATH=$INDEX_SHARE_PATH" >> "$GITHUB_ENV"

          PACTA_DATA_QUARTER="$(jq -rc '.pacta_data_quarter' $config_file)"
          echo "PACTA_DATA_QUARTER=$PACTA_DATA_QUARTER"
          echo "PACTA_DATA_QUARTER=$PACTA_DATA_QUARTER" >> "$GITHUB_ENV"

      - name: Checkout templates.transition.monitor
        uses: actions/checkout@v4
        with:
          repository: RMI-PACTA/templates.transition.monitor
          path: templates.transition.monitor
          token: ${{ secrets.TEMPLATES_TOKEN }}

      # https://github.com/Azure/login?tab=readme-ov-file#login-with-openid-connect-oidc-recommended
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # https://github.com/marketplace/actions/azure-cli-action#workflow-to-execute-an-azure-cli-script-of-a-specific-cli-version
      - name: Download pacta-data
        uses: azure/CLI@v1.0.9
        with:
          # azcliversion: 2.30.0
          inlineScript: |
            pacta_data_share_url="https://pactadatadev.file.core.windows.net/workflow-data-preparation-outputs"
            az storage copy \
              --source "$pacta_data_share_url"/"${{ env.PACTA_DATA_SHARE_PATH }}" \
              --destination "pacta-data" \
              --recursive \
              --exclude-pattern "*.sqlite"
            # download indices
            index_share_url="https://pactadatadev.file.core.windows.net/workflow-prepare-pacta-indices-outputs"
            az storage copy \
              --source "$index_share_url"/"${{ env.INDEX_SHARE_PATH }}" \
              --destination "index-data" \
              --recursive \
              --exclude-pattern "*.sqlite"
            # move data
            mv "pacta-data/${{ env.PACTA_DATA_SHARE_PATH }}" "pacta-data/${{ env.PACTA_DATA_QUARTER }}"
            mv "index-data/${{ env.INDEX_SHARE_PATH }}"/* "pacta-data/${{ env.PACTA_DATA_QUARTER }}"
            ls pacta-data/${{ env.PACTA_DATA_QUARTER }}

      - name: Identify LABELs in dockerfile
        id: custom-labels
        run: |
          DOCKERFILE_LABELS="$(grep "^LABEL" workflow.transition.monitor/Dockerfile | sed 's/^LABEL[[:space:]]*//')"
          echo "$DOCKERFILE_LABELS"
          echo "DOCKERFILE_LABELS<<EOF" >> $GITHUB_ENV
          echo "$DOCKERFILE_LABELS" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          echo 'dockerfile-labels<<EOF' >> $GITHUB_OUTPUT
          echo "$DOCKERFILE_LABELS" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      # Setup docker metadata, including tags and labels (and annotations)
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          annotations:
            ${{ env.DOCKERFILE_LABELS }}
          labels:
            ${{ env.DOCKERFILE_LABELS }}
          tags: |
            type=schedule
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            ${{ inputs.additional-image-tags }}
            ${{ env.NOW }},priority=1100

      # set up our build environment
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#example-masking-a-generated-output-within-a-single-job
      - name: Get credentials for docker registry
        uses: azure/CLI@v1.0.9
        with:
          # azcliversion: 2.30.0
          inlineScript: |
            # Username is not a placeholder. See https://stackoverflow.com/a/73250630
            DOCKER_USER="00000000-0000-0000-0000-000000000000" >> "$GITHUB_ENV"
            DOCKER_TOKEN="$(az acr login -n ${{ inputs.registry }} --expose-token --query 'accessToken' --output tsv)" >> "$GITHUB_ENV"
            # echo "::add-mask::$DOCKER_USER"
            echo "::add-mask::$DOCKER_TOKEN"
            echo "DOCKER_USER=$DOCKER_USER" >> "$GITHUB_ENV"
            echo "DOCKER_TOKEN=$DOCKER_TOKEN" >> "$GITHUB_ENV"

      - name: Login to Registry
        run: |
          echo "$DOCKER_TOKEN" | docker login ${{ inputs.registry }} --username "$DOCKER_USER" --password-stdin

      # Actually build the image (for a single architecture)!
      - name: Build
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./workflow.transition.monitor/Dockerfile
          # include the labels from the meta step
          labels: ${{ steps.meta.outputs.labels }}
          # the same for annotations
          annotations: ${{ steps.meta.outputs.annotations }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          # Use the GitHub actions cache to speed up repeated builds
          cache-from: type=gha
          cache-to: type=gha,mode=min
          # but don't cache the install pacta step.
          no-cache-filters: install-pacta

      - name: Export Outputs
        id: outputs
        run: |
          TAGGED_IMAGE="$(jq -rc '.tags[0]' <<< "$DOCKER_METADATA_OUTPUT_JSON")"
          echo "full-image-name=$TAGGED_IMAGE"
          echo "full-image-name=$TAGGED_IMAGE" >> "$GITHUB_OUTPUT"


  test:
    runs-on: ubuntu-latest
    needs:
      - docker-build
    timeout-minutes: 15

    steps:

      # https://github.com/Azure/login?tab=readme-ov-file#login-with-openid-connect-oidc-recommended
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Checkout workflow.transition.monitor
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            working_dir
            build/config/${{ inputs.image-name }}.json

      - name: Prepare User and results directories
        run: |
          mkdir user_dir

          config_file="build/config/${{ inputs.image-name }}.json"
          PROJECT_CODE="$(jq -r '.project_code' $config_file)"
          PACTA_DATA_QUARTER="$(jq -r '.pacta_data_quarter' $config_file)"

          sed \
            -e "s/{{portfolio_name}}/${{ inputs.image-name }}-PORTFOLIO/" \
            -e "s/{{investor_name}}/${{ inputs.image-name }}-INVESTOR/" \
            -e "s/{{peer_group}}/bank/" \
            -e "s/{{language}}/en/" \
            -e "s/{{project_code}}/$PROJECT_CODE/" \
            -e "s/{{holdings_date}}/$PACTA_DATA_QUARTER/" \
            working_dir/10_Parameter_File/test_PortfolioParameters.yml \
            >> working_dir/10_Parameter_File/rmi_pacta_2022q4_general_PortfolioParameters.yml

          mv working_dir/20_Raw_Inputs/1234.csv working_dir/20_Raw_Inputs/${{ inputs.image-name }}.csv
          ls -laR

      - name: Get credentials for docker registry
        uses: azure/CLI@v1.0.9
        with:
          # azcliversion: 2.30.0
          inlineScript: |
            # Username is not a placeholder. See https://stackoverflow.com/a/73250630
            DOCKER_USER="00000000-0000-0000-0000-000000000000" >> "$GITHUB_ENV"
            DOCKER_TOKEN="$(az acr login -n ${{ inputs.registry }} --expose-token --query 'accessToken' --output tsv)" >> "$GITHUB_ENV"
            # echo "::add-mask::$DOCKER_USER"
            echo "::add-mask::$DOCKER_TOKEN"
            echo "DOCKER_USER=$DOCKER_USER" >> "$GITHUB_ENV"
            echo "DOCKER_TOKEN=$DOCKER_TOKEN" >> "$GITHUB_ENV"

      - name: Login to Registry
        run: |
          echo "$DOCKER_TOKEN" | docker login ${{ inputs.registry }} --username "$DOCKER_USER" --password-stdin

      - name: Test
        run: |
          docker run \
            --network none \
            --user 1000:1000 \
            --mount "type=bind,source=./working_dir,target=/bound/working_dir" \
            --mount "type=bind,readonly,source=./user_dir,target=/user_results" \
            ${{ needs.docker-build.outputs.full-image-name }} \
            /bound/bin/run-r-scripts ${{ inputs.image-name }}



